{"version":3,"sources":["bootstrap-multiselect.js","bootstrap-datepicker.js"],"names":[],"mappingslfile":"form_elements.js","sourcesContent":["/**\n * Bootstrap Multiselect (https://github.com/davidstutz/bootstrap-multiselect)\n * \n * Apache License, Version 2.0:\n * Copyright (c) 2012 - 2015 David Stutz\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a\n * copy of the License at http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations\n * under the License.\n * \n * BSD 3-Clause License:\n * Copyright (c) 2012 - 2015 David Stutz\n * All rights reserved.\n * \n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *    - Redistributions of source code must retain the above copyright notice,\n *      this list of conditions and the following disclaimer.\n *    - Redistributions in binary form must reproduce the above copyright notice,\n *      this list of conditions and the following disclaimer in the documentation\n *      and/or other materials provided with the distribution.\n *    - Neither the name of David Stutz nor the names of its contributors may be\n *      used to endorse or promote products derived from this software without\n *      specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\n * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;\n * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\n * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n!function ($) {\n    \"use strict\";// jshint ;_;\n\n    if (typeof ko !== 'undefined' && ko.bindingHandlers && !ko.bindingHandlers.multiselect) {\n        ko.bindingHandlers.multiselect = {\n            after: ['options', 'value', 'selectedOptions', 'enable', 'disable'],\n\n            init: function(element, valueAccessor, allBindings, viewModel, bindingContext) {\n                var $element = $(element);\n                var config = ko.toJS(valueAccessor());\n\n                $element.multiselect(config);\n\n                if (allBindings.has('options')) {\n                    var options = allBindings.get('options');\n                    if (ko.isObservable(options)) {\n                        ko.computed({\n                            read: function() {\n                                options();\n                                setTimeout(function() {\n                                    var ms = $element.data('multiselect');\n                                    if (ms)\n                                        ms.updateOriginalOptions();//Not sure how beneficial this is.\n                                    $element.multiselect('rebuild');\n                                }, 1);\n                            },\n                            disposeWhenNodeIsRemoved: element\n                        });\n                    }\n                }\n\n                //value and selectedOptions are two-way, so these will be triggered even by our own actions.\n                //It needs some way to tell if they are triggered because of us or because of outside change.\n                //It doesn't loop but it's a waste of processing.\n                if (allBindings.has('value')) {\n                    var value = allBindings.get('value');\n                    if (ko.isObservable(value)) {\n                        ko.computed({\n                            read: function() {\n                                value();\n                                setTimeout(function() {\n                                    $element.multiselect('refresh');\n                                }, 1);\n                            },\n                            disposeWhenNodeIsRemoved: element\n                        }).extend({ rateLimit: 100, notifyWhenChangesStop: true });\n                    }\n                }\n\n                //Switched from arrayChange subscription to general subscription using 'refresh'.\n                //Not sure performance is any better using 'select' and 'deselect'.\n                if (allBindings.has('selectedOptions')) {\n                    var selectedOptions = allBindings.get('selectedOptions');\n                    if (ko.isObservable(selectedOptions)) {\n                        ko.computed({\n                            read: function() {\n                                selectedOptions();\n                                setTimeout(function() {\n                                    $element.multiselect('refresh');\n                                }, 1);\n                            },\n                            disposeWhenNodeIsRemoved: element\n                        }).extend({ rateLimit: 100, notifyWhenChangesStop: true });\n                    }\n                }\n\n                var setEnabled = function (enable) {\n                    setTimeout(function () {\n                        if (enable)\n                            $element.multiselect('enable');\n                        else\n                            $element.multiselect('disable');\n                    });\n                };\n\n                if (allBindings.has('enable')) {\n                    var enable = allBindings.get('enable');\n                    if (ko.isObservable(enable)) {\n                        ko.computed({\n                            read: function () {\n                                setEnabled(enable());\n                            },\n                            disposeWhenNodeIsRemoved: element\n                        }).extend({ rateLimit: 100, notifyWhenChangesStop: true });\n                    } else {\n                        setEnabled(enable);\n                    }\n                }\n\n                if (allBindings.has('disable')) {\n                    var disable = allBindings.get('disable');\n                    if (ko.isObservable(disable)) {\n                        ko.computed({\n                            read: function () {\n                                setEnabled(!disable());\n                            },\n                            disposeWhenNodeIsRemoved: element\n                        }).extend({ rateLimit: 100, notifyWhenChangesStop: true });\n                    } else {\n                        setEnabled(!disable);\n                    }\n                }\n\n                ko.utils.domNodeDisposal.addDisposeCallback(element, function() {\n                    $element.multiselect('destroy');\n                });\n            },\n\n            update: function(element, valueAccessor, allBindings, viewModel, bindingContext) {\n                var $element = $(element);\n                var config = ko.toJS(valueAccessor());\n\n                $element.multiselect('setOptions', config);\n                $element.multiselect('rebuild');\n            }\n        };\n    }\n\n    function forEach(array, callback) {\n        for (var index = 0; index < array.length; ++index) {\n            callback(array[index], index);\n        }\n    }\n\n    /**\n     * Constructor to create a new multiselect using the given select.\n     *\n     * @param {jQuery} select\n     * @param {Object} options\n     * @returns {Multiselect}\n     */\n    function Multiselect(select, options) {\n\n        this.$select = $(select);\n        \n        // Placeholder via data attributes\n        if (this.$select.attr(\"data-placeholder\")) {\n            options.nonSelectedText = this.$select.data(\"placeholder\");\n        }\n        \n        this.options = this.mergeOptions($.extend({}, options, this.$select.data()));\n\n        // Initialization.\n        // We have to clone to create a new reference.\n        this.originalOptions = this.$select.clone()[0].options;\n        this.query = '';\n        this.searchTimeout = null;\n        this.lastToggledInput = null;\n\n        this.options.multiple = this.$select.attr('multiple') === \"multiple\";\n        this.options.onChange = $.proxy(this.options.onChange, this);\n        this.options.onDropdownShow = $.proxy(this.options.onDropdownShow, this);\n        this.options.onDropdownHide = $.proxy(this.options.onDropdownHide, this);\n        this.options.onDropdownShown = $.proxy(this.options.onDropdownShown, this);\n        this.options.onDropdownHidden = $.proxy(this.options.onDropdownHidden, this);\n        this.options.onInitialized = $.proxy(this.options.onInitialized, this);\n        \n        // Build select all if enabled.\n        this.buildContainer();\n        this.buildButton();\n        this.buildDropdown();\n        this.buildSelectAll();\n        this.buildDropdownOptions();\n        this.buildFilter();\n\n        this.updateButtonText();\n        this.updateSelectAll(true);\n\n        if (this.options.disableIfEmpty && $('option', this.$select).length <= 0) {\n            this.disable();\n        }\n        \n        this.$select.hide().after(this.$container);\n        this.options.onInitialized(this.$select, this.$container);\n    }\n\n    Multiselect.prototype = {\n\n        defaults: {\n            /**\n             * Default text function will either print 'None selected' in case no\n             * option is selected or a list of the selected options up to a length\n             * of 3 selected options.\n             * \n             * @param {jQuery} options\n             * @param {jQuery} select\n             * @returns {String}\n             */\n            buttonText: function(options, select) {\n                if (this.disabledText.length > 0 \n                        && (this.disableIfEmpty || select.prop('disabled')) \n                        && options.length == 0) {\n                    \n                    return this.disabledText;\n                }\n                else if (options.length === 0) {\n                    return this.nonSelectedText;\n                }\n                else if (this.allSelectedText \n                        && options.length === $('option', $(select)).length \n                        && $('option', $(select)).length !== 1 \n                        && this.multiple) {\n\n                    if (this.selectAllNumber) {\n                        return this.allSelectedText + ' (' + options.length + ')';\n                    }\n                    else {\n                        return this.allSelectedText;\n                    }\n                }\n                else if (options.length > this.numberDisplayed) {\n                    return options.length + ' ' + this.nSelectedText;\n                }\n                else {\n                    var selected = '';\n                    var delimiter = this.delimiterText;\n                    \n                    options.each(function() {\n                        var label = ($(this).attr('label') !== undefined) ? $(this).attr('label') : $(this).text();\n                        selected += label + delimiter;\n                    });\n                    \n                    return selected.substr(0, selected.length - 2);\n                }\n            },\n            /**\n             * Updates the title of the button similar to the buttonText function.\n             * \n             * @param {jQuery} options\n             * @param {jQuery} select\n             * @returns {@exp;selected@call;substr}\n             */\n            buttonTitle: function(options, select) {\n                if (options.length === 0) {\n                    return this.nonSelectedText;\n                }\n                else {\n                    var selected = '';\n                    var delimiter = this.delimiterText;\n                    \n                    options.each(function () {\n                        var label = ($(this).attr('label') !== undefined) ? $(this).attr('label') : $(this).text();\n                        selected += label + delimiter;\n                    });\n                    return selected.substr(0, selected.length - 2);\n                }\n            },\n            /**\n             * Create a label.\n             *\n             * @param {jQuery} element\n             * @returns {String}\n             */\n            optionLabel: function(element){\n                return $(element).attr('label') || $(element).text();\n            },\n            /**\n             * Create a class.\n             *\n             * @param {jQuery} element\n             * @returns {String}\n             */\n            optionClass: function(element) {\n                return $(element).attr('class') || '';\n            },\n            /**\n             * Triggered on change of the multiselect.\n             * \n             * Not triggered when selecting/deselecting options manually.\n             * \n             * @param {jQuery} option\n             * @param {Boolean} checked\n             */\n            onChange : function(option, checked) {\n\n            },\n            /**\n             * Triggered when the dropdown is shown.\n             *\n             * @param {jQuery} event\n             */\n            onDropdownShow: function(event) {\n\n            },\n            /**\n             * Triggered when the dropdown is hidden.\n             *\n             * @param {jQuery} event\n             */\n            onDropdownHide: function(event) {\n\n            },\n            /**\n             * Triggered after the dropdown is shown.\n             * \n             * @param {jQuery} event\n             */\n            onDropdownShown: function(event) {\n                \n            },\n            /**\n             * Triggered after the dropdown is hidden.\n             * \n             * @param {jQuery} event\n             */\n            onDropdownHidden: function(event) {\n                \n            },\n            /**\n             * Triggered on select all.\n             */\n            onSelectAll: function(checked) {\n                \n            },\n            /**\n             * Triggered after initializing.\n             *\n             * @param {jQuery} $select\n             * @param {jQuery} $container\n             */\n            onInitialized: function($select, $container) {\n\n            },\n            enableHTML: false,\n            buttonClass: 'btn btn-default',\n            inheritClass: false,\n            buttonWidth: 'auto',\n            buttonContainer: '<div class=\"btn-group\" />',\n            dropRight: false,\n            dropUp: false,\n            selectedClass: 'active',\n            // Maximum height of the dropdown menu.\n            // If maximum height is exceeded a scrollbar will be displayed.\n            maxHeight: false,\n            checkboxName: false,\n            includeSelectAllOption: false,\n            includeSelectAllIfMoreThan: 0,\n            selectAllText: ' Select all',\n            selectAllValue: 'multiselect-all',\n            selectAllName: false,\n            selectAllNumber: true,\n            selectAllJustVisible: true,\n            enableFiltering: false,\n            enableCaseInsensitiveFiltering: false,\n            enableFullValueFiltering: false,\n            enableClickableOptGroups: false,\n            enableCollapsibelOptGroups: false,\n            filterPlaceholder: 'Search',\n            // possible options: 'text', 'value', 'both'\n            filterBehavior: 'text',\n            includeFilterClearBtn: true,\n            preventInputChangeEvent: false,\n            nonSelectedText: 'None selected',\n            nSelectedText: 'selected',\n            allSelectedText: 'All selected',\n            numberDisplayed: 3,\n            disableIfEmpty: false,\n            disabledText: '',\n            delimiterText: ', ',\n            templates: {\n                button: '<button type=\"button\" class=\"multiselect dropdown-toggle\" data-toggle=\"dropdown\"><span class=\"multiselect-selected-text\"></span> <b class=\"caret\"></b></button>',\n                ul: '<ul class=\"multiselect-container dropdown-menu\"></ul>',\n                filter: '<li class=\"multiselect-item filter\"><div class=\"input-group\"><span class=\"input-group-addon\"><i class=\"glyphicon glyphicon-search\"></i></span><input class=\"form-control multiselect-search\" type=\"text\"></div></li>',\n                filterClearBtn: '<span class=\"input-group-btn\"><button class=\"btn btn-default multiselect-clear-filter\" type=\"button\"><i class=\"glyphicon glyphicon-remove-circle\"></i></button></span>',\n                li: '<li><a tabindex=\"0\"><label></label></a></li>',\n                divider: '<li class=\"multiselect-item divider\"></li>',\n                liGroup: '<li class=\"multiselect-item multiselect-group\"><label></label></li>'\n            }\n        },\n\n        constructor: Multiselect,\n\n        /**\n         * Builds the container of the multiselect.\n         */\n        buildContainer: function() {\n            this.$container = $(this.options.buttonContainer);\n            this.$container.on('show.bs.dropdown', this.options.onDropdownShow);\n            this.$container.on('hide.bs.dropdown', this.options.onDropdownHide);\n            this.$container.on('shown.bs.dropdown', this.options.onDropdownShown);\n            this.$container.on('hidden.bs.dropdown', this.options.onDropdownHidden);\n        },\n\n        /**\n         * Builds the button of the multiselect.\n         */\n        buildButton: function() {\n            this.$button = $(this.options.templates.button).addClass(this.options.buttonClass);\n            if (this.$select.attr('class') && this.options.inheritClass) {\n                this.$button.addClass(this.$select.attr('class'));\n            }\n            // Adopt active state.\n            if (this.$select.prop('disabled')) {\n                this.disable();\n            }\n            else {\n                this.enable();\n            }\n\n            // Manually add button width if set.\n            if (this.options.buttonWidth && this.options.buttonWidth !== 'auto') {\n                this.$button.css({\n                    'width' : this.options.buttonWidth,\n                    'overflow' : 'hidden',\n                    'text-overflow' : 'ellipsis'\n                });\n                this.$container.css({\n                    'width': this.options.buttonWidth\n                });\n            }\n\n            // Keep the tab index from the select.\n            var tabindex = this.$select.attr('tabindex');\n            if (tabindex) {\n                this.$button.attr('tabindex', tabindex);\n            }\n\n            this.$container.prepend(this.$button);\n        },\n\n        /**\n         * Builds the ul representing the dropdown menu.\n         */\n        buildDropdown: function() {\n\n            // Build ul.\n            this.$ul = $(this.options.templates.ul);\n\n            if (this.options.dropRight) {\n                this.$ul.addClass('pull-right');\n            }\n\n            // Set max height of dropdown menu to activate auto scrollbar.\n            if (this.options.maxHeight) {\n                // TODO: Add a class for this option to move the css declarations.\n                this.$ul.css({\n                    'max-height': this.options.maxHeight + 'px',\n                    'overflow-y': 'auto',\n                    'overflow-x': 'hidden'\n                });\n            }\n            \n            if (this.options.dropUp) {\n                \n                var height = Math.min(this.options.maxHeight, $('option[data-role!=\"divider\"]', this.$select).length*26 + $('option[data-role=\"divider\"]', this.$select).length*19 + (this.options.includeSelectAllOption ? 26 : 0) + (this.options.enableFiltering || this.options.enableCaseInsensitiveFiltering ? 44 : 0));\n                var moveCalc = height + 34;\n                \n                this.$ul.css({\n                    'max-height': height + 'px',\n                    'overflow-y': 'auto',\n                    'overflow-x': 'hidden',\n                    'margin-top': \"-\" + moveCalc + 'px'\n                });\n            }\n            \n            this.$container.append(this.$ul);\n        },\n\n        /**\n         * Build the dropdown options and binds all nessecary events.\n         * \n         * Uses createDivider and createOptionValue to create the necessary options.\n         */\n        buildDropdownOptions: function() {\n\n            this.$select.children().each($.proxy(function(index, element) {\n\n                var $element = $(element);\n                // Support optgroups and options without a group simultaneously.\n                var tag = $element.prop('tagName')\n                    .toLowerCase();\n            \n                if ($element.prop('value') === this.options.selectAllValue) {\n                    return;\n                }\n\n                if (tag === 'optgroup') {\n                    this.createOptgroup(element);\n                }\n                else if (tag === 'option') {\n\n                    if ($element.data('role') === 'divider') {\n                        this.createDivider();\n                    }\n                    else {\n                        this.createOptionValue(element);\n                    }\n\n                }\n\n                // Other illegal tags will be ignored.\n            }, this));\n\n            // Bind the change event on the dropdown elements.\n            $('li input', this.$ul).on('change', $.proxy(function(event) {\n                var $target = $(event.target);\n\n                var checked = $target.prop('checked') || false;\n                var isSelectAllOption = $target.val() === this.options.selectAllValue;\n\n                // Apply or unapply the configured selected class.\n                if (this.options.selectedClass) {\n                    if (checked) {\n                        $target.closest('li')\n                            .addClass(this.options.selectedClass);\n                    }\n                    else {\n                        $target.closest('li')\n                            .removeClass(this.options.selectedClass);\n                    }\n                }\n\n                // Get the corresponding option.\n                var value = $target.val();\n                var $option = this.getOptionByValue(value);\n\n                var $optionsNotThis = $('option', this.$select).not($option);\n                var $checkboxesNotThis = $('input', this.$container).not($target);\n\n                if (isSelectAllOption) {\n                    if (checked) {\n                        this.selectAll(this.options.selectAllJustVisible);\n                    }\n                    else {\n                        this.deselectAll(this.options.selectAllJustVisible);\n                    }\n                }\n                else {\n                    if (checked) {\n                        $option.prop('selected', true);\n\n                        if (this.options.multiple) {\n                            // Simply select additional option.\n                            $option.prop('selected', true);\n                        }\n                        else {\n                            // Unselect all other options and corresponding checkboxes.\n                            if (this.options.selectedClass) {\n                                $($checkboxesNotThis).closest('li').removeClass(this.options.selectedClass);\n                            }\n\n                            $($checkboxesNotThis).prop('checked', false);\n                            $optionsNotThis.prop('selected', false);\n\n                            // It's a single selection, so close.\n                            this.$button.click();\n                        }\n\n                        if (this.options.selectedClass === \"active\") {\n                            $optionsNotThis.closest(\"a\").css(\"outline\", \"\");\n                        }\n                    }\n                    else {\n                        // Unselect option.\n                        $option.prop('selected', false);\n                    }\n                    \n                    // To prevent select all from firing onChange: #575\n                    this.options.onChange($option, checked);\n                }\n\n                this.$select.change();\n\n                this.updateButtonText();\n                this.updateSelectAll();\n\n                if(this.options.preventInputChangeEvent) {\n                    return false;\n                }\n            }, this));\n\n            $('li a', this.$ul).on('mousedown', function(e) {\n                if (e.shiftKey) {\n                    // Prevent selecting text by Shift+click\n                    return false;\n                }\n            });\n        \n            $('li a', this.$ul).on('touchstart click', $.proxy(function(event) {\n                event.stopPropagation();\n\n                var $target = $(event.target);\n                \n                if (event.shiftKey && this.options.multiple) {\n                    if($target.is(\"label\")){ // Handles checkbox selection manually (see https://github.com/davidstutz/bootstrap-multiselect/issues/431)\n                        event.preventDefault();\n                        $target = $target.find(\"input\");\n                        $target.prop(\"checked\", !$target.prop(\"checked\"));\n                    }\n                    var checked = $target.prop('checked') || false;\n\n                    if (this.lastToggledInput !== null && this.lastToggledInput !== $target) { // Make sure we actually have a range\n                        var from = $target.closest(\"li\").index();\n                        var to = this.lastToggledInput.closest(\"li\").index();\n                        \n                        if (from > to) { // Swap the indices\n                            var tmp = to;\n                            to = from;\n                            from = tmp;\n                        }\n                        \n                        // Make sure we grab all elements since slice excludes the last index\n                        ++to;\n                        \n                        // Change the checkboxes and underlying options\n                        var range = this.$ul.find(\"li\").slice(from, to).find(\"input\");\n                        \n                        range.prop('checked', checked);\n                        \n                        if (this.options.selectedClass) {\n                            range.closest('li')\n                                .toggleClass(this.options.selectedClass, checked);\n                        }\n                        \n                        for (var i = 0, j = range.length; i < j; i++) {\n                            var $checkbox = $(range[i]);\n\n                            var $option = this.getOptionByValue($checkbox.val());\n\n                            $option.prop('selected', checked);\n                        }                   \n                    }\n                    \n                    // Trigger the select \"change\" event\n                    $target.trigger(\"change\");\n                }\n                \n                // Remembers last clicked option\n                if($target.is(\"input\") && !$target.closest(\"li\").is(\".multiselect-item\")){\n                    this.lastToggledInput = $target;\n                }\n\n                $target.blur();\n            }, this));\n\n            // Keyboard support.\n            this.$container.off('keydown.multiselect').on('keydown.multiselect', $.proxy(function(event) {\n                if ($('input[type=\"text\"]', this.$container).is(':focus')) {\n                    return;\n                }\n\n                if (event.keyCode === 9 && this.$container.hasClass('open')) {\n                    this.$button.click();\n                }\n                else {\n                    var $items = $(this.$container).find(\"li:not(.divider):not(.disabled) a\").filter(\":visible\");\n\n                    if (!$items.length) {\n                        return;\n                    }\n\n                    var index = $items.index($items.filter(':focus'));\n\n                    // Navigation up.\n                    if (event.keyCode === 38 && index > 0) {\n                        index--;\n                    }\n                    // Navigate down.\n                    else if (event.keyCode === 40 && index < $items.length - 1) {\n                        index++;\n                    }\n                    else if (!~index) {\n                        index = 0;\n                    }\n\n                    var $current = $items.eq(index);\n                    $current.focus();\n\n                    if (event.keyCode === 32 || event.keyCode === 13) {\n                        var $checkbox = $current.find('input');\n\n                        $checkbox.prop(\"checked\", !$checkbox.prop(\"checked\"));\n                        $checkbox.change();\n                    }\n\n                    event.stopPropagation();\n                    event.preventDefault();\n                }\n            }, this));\n\n            if(this.options.enableClickableOptGroups && this.options.multiple) {\n                $('li.multiselect-group', this.$ul).on('click', $.proxy(function(event) {\n                    event.stopPropagation();\n                    console.log('test');\n                    var group = $(event.target).parent();\n\n                    // Search all option in optgroup\n                    var $options = group.nextUntil('li.multiselect-group');\n                    var $visibleOptions = $options.filter(\":visible:not(.disabled)\");\n\n                    // check or uncheck items\n                    var allChecked = true;\n                    var optionInputs = $visibleOptions.find('input');\n                    var values = [];\n                    \n                    optionInputs.each(function() {\n                        allChecked = allChecked && $(this).prop('checked');\n                        values.push($(this).val());\n                    });\n\n                    if (!allChecked) {\n                        this.select(values, false);\n                    }\n                    else {\n                        this.deselect(values, false);\n                    }\n                    \n                    this.options.onChange(optionInputs, !allChecked);\n               }, this));\n            }\n\n            if (this.options.enableCollapsibleOptGroups && this.options.multiple) {\n                $(\"li.multiselect-group input\", this.$ul).off();\n                $(\"li.multiselect-group\", this.$ul).siblings().not(\"li.multiselect-group, li.multiselect-all\", this.$ul).each( function () {\n                    $(this).toggleClass('hidden', true);\n                });\n                \n                $(\"li.multiselect-group\", this.$ul).on(\"click\", $.proxy(function(group) {\n                    group.stopPropagation();\n                }, this));\n                \n                $(\"li.multiselect-group > a > b\", this.$ul).on(\"click\", $.proxy(function(t) {\n                    t.stopPropagation();\n                    var n = $(t.target).closest('li');\n                    var r = n.nextUntil(\"li.multiselect-group\");\n                    var i = true;\n                    \n                    r.each(function() {\n                        i = i && $(this).hasClass('hidden');\n                    });\n                    \n                    r.toggleClass('hidden', !i);\n                }, this));\n                \n                $(\"li.multiselect-group > a > input\", this.$ul).on(\"change\", $.proxy(function(t) {\n                    t.stopPropagation();\n                    var n = $(t.target).closest('li');\n                    var r = n.nextUntil(\"li.multiselect-group\", ':not(.disabled)');\n                    var s = r.find(\"input\");\n                    \n                    var i = true;\n                    s.each(function() {\n                        i = i && $(this).prop(\"checked\");\n                    });\n                    \n                    s.prop(\"checked\", !i).trigger(\"change\");\n                }, this));\n                \n                // Set the initial selection state of the groups.\n                $('li.multiselect-group', this.$ul).each(function() {\n                    var r = $(this).nextUntil(\"li.multiselect-group\", ':not(.disabled)');\n                    var s = r.find(\"input\");\n                    \n                    var i = true;\n                    s.each(function() {\n                        i = i && $(this).prop(\"checked\");\n                    });\n                    \n                    $(this).find('input').prop(\"checked\", i);\n                });\n                \n                // Update the group checkbox based on new selections among the\n                // corresponding children.\n                $(\"li input\", this.$ul).on(\"change\", $.proxy(function(t) {\n                    t.stopPropagation();\n                    var n = $(t.target).closest('li');\n                    var r1 = n.prevUntil(\"li.multiselect-group\", ':not(.disabled)');\n                    var r2 = n.nextUntil(\"li.multiselect-group\", ':not(.disabled)');\n                    var s1 = r1.find(\"input\");\n                    var s2 = r2.find(\"input\");\n                    \n                    var i = $(t.target).prop('checked');\n                    s1.each(function() {\n                        i = i && $(this).prop(\"checked\");\n                    });\n                    \n                    s2.each(function() {\n                        i = i && $(this).prop(\"checked\");\n                    });\n                    \n                    n.prevAll('.multiselect-group').find('input').prop('checked', i);\n                }, this));\n                \n                $(\"li.multiselect-all\", this.$ul).css('background', '#f3f3f3').css('border-bottom', '1px solid #eaeaea');\n                $(\"li.multiselect-group > a, li.multiselect-all > a > label.checkbox\", this.$ul).css('padding', '3px 20px 3px 35px');\n                $(\"li.multiselect-group > a > input\", this.$ul).css('margin', '4px 0px 5px -20px');\n            }\n        },\n\n        /**\n         * Create an option using the given select option.\n         *\n         * @param {jQuery} element\n         */\n        createOptionValue: function(element) {\n            var $element = $(element);\n            if ($element.is(':selected')) {\n                $element.prop('selected', true);\n            }\n\n            // Support the label attribute on options.\n            var label = this.options.optionLabel(element);\n            var classes = this.options.optionClass(element);\n            var value = $element.val();\n            var inputType = this.options.multiple ? \"checkbox\" : \"radio\";\n\n            var $li = $(this.options.templates.li);\n            var $label = $('label', $li);\n            $label.addClass(inputType);\n            $li.addClass(classes);\n\n            if (this.options.enableHTML) {\n                $label.html(\" \" + label);\n            }\n            else {\n                $label.text(\" \" + label);\n            }\n        \n            var $checkbox = $('<input/>').attr('type', inputType);\n\n            if (this.options.checkboxName) {\n                $checkbox.attr('name', this.options.checkboxName);\n            }\n            $label.prepend($checkbox);\n\n            var selected = $element.prop('selected') || false;\n            $checkbox.val(value);\n\n            if (value === this.options.selectAllValue) {\n                $li.addClass(\"multiselect-item multiselect-all\");\n                $checkbox.parent().parent()\n                    .addClass('multiselect-all');\n            }\n\n            $label.attr('title', $element.attr('title'));\n\n            this.$ul.append($li);\n\n            if ($element.is(':disabled')) {\n                $checkbox.attr('disabled', 'disabled')\n                    .prop('disabled', true)\n                    .closest('a')\n                    .attr(\"tabindex\", \"-1\")\n                    .closest('li')\n                    .addClass('disabled');\n            }\n\n            $checkbox.prop('checked', selected);\n\n            if (selected && this.options.selectedClass) {\n                $checkbox.closest('li')\n                    .addClass(this.options.selectedClass);\n            }\n        },\n\n        /**\n         * Creates a divider using the given select option.\n         *\n         * @param {jQuery} element\n         */\n        createDivider: function(element) {\n            var $divider = $(this.options.templates.divider);\n            this.$ul.append($divider);\n        },\n\n        /**\n         * Creates an optgroup.\n         *\n         * @param {jQuery} group\n         */\n        createOptgroup: function(group) {            \n            if (this.options.enableCollapsibleOptGroups && this.options.multiple) {\n                var label = $(group).attr(\"label\");\n                var value = $(group).attr(\"value\");\n                var r = $('<li class=\"multiselect-item multiselect-group\"><a href=\"javascript:void(0);\"><input type=\"checkbox\" value=\"' + value + '\"/><b> ' + label + '<b class=\"caret\"></b></b></a></li>');\n\n                if (this.options.enableClickableOptGroups) {\n                    r.addClass(\"multiselect-group-clickable\")\n                }\n                this.$ul.append(r);\n                if ($(group).is(\":disabled\")) {\n                    r.addClass(\"disabled\")\n                }\n                $(\"option\", group).each($.proxy(function($, group) {\n                    this.createOptionValue(group)\n                }, this))\n            }\n            else {\n                var groupName = $(group).prop('label');\n\n                // Add a header for the group.\n                var $li = $(this.options.templates.liGroup);\n\n                if (this.options.enableHTML) {\n                    $('label', $li).html(groupName);\n                }\n                else {\n                    $('label', $li).text(groupName);\n                }\n\n                if (this.options.enableClickableOptGroups) {\n                    $li.addClass('multiselect-group-clickable');\n                }\n\n                this.$ul.append($li);\n\n                if ($(group).is(':disabled')) {\n                    $li.addClass('disabled');\n                }\n\n                // Add the options of the group.\n                $('option', group).each($.proxy(function(index, element) {\n                    this.createOptionValue(element);\n                }, this));\n            }\n        },\n\n        /**\n         * Build the select all.\n         * \n         * Checks if a select all has already been created.\n         */\n        buildSelectAll: function() {\n            if (typeof this.options.selectAllValue === 'number') {\n                this.options.selectAllValue = this.options.selectAllValue.toString();\n            }\n            \n            var alreadyHasSelectAll = this.hasSelectAll();\n\n            if (!alreadyHasSelectAll && this.options.includeSelectAllOption && this.options.multiple\n                    && $('option', this.$select).length > this.options.includeSelectAllIfMoreThan) {\n\n                // Check whether to add a divider after the select all.\n                if (this.options.includeSelectAllDivider) {\n                    this.$ul.prepend($(this.options.templates.divider));\n                }\n\n                var $li = $(this.options.templates.li);\n                $('label', $li).addClass(\"checkbox\");\n                \n                if (this.options.enableHTML) {\n                    $('label', $li).html(\" \" + this.options.selectAllText);\n                }\n                else {\n                    $('label', $li).text(\" \" + this.options.selectAllText);\n                }\n                \n                if (this.options.selectAllName) {\n                    $('label', $li).prepend('<input type=\"checkbox\" name=\"' + this.options.selectAllName + '\" />');\n                }\n                else {\n                    $('label', $li).prepend('<input type=\"checkbox\" />');\n                }\n                \n                var $checkbox = $('input', $li);\n                $checkbox.val(this.options.selectAllValue);\n\n                $li.addClass(\"multiselect-item multiselect-all\");\n                $checkbox.parent().parent()\n                    .addClass('multiselect-all');\n\n                this.$ul.prepend($li);\n\n                $checkbox.prop('checked', false);\n            }\n        },\n\n        /**\n         * Builds the filter.\n         */\n        buildFilter: function() {\n\n            // Build filter if filtering OR case insensitive filtering is enabled and the number of options exceeds (or equals) enableFilterLength.\n            if (this.options.enableFiltering || this.options.enableCaseInsensitiveFiltering) {\n                var enableFilterLength = Math.max(this.options.enableFiltering, this.options.enableCaseInsensitiveFiltering);\n\n                if (this.$select.find('option').length >= enableFilterLength) {\n\n                    this.$filter = $(this.options.templates.filter);\n                    $('input', this.$filter).attr('placeholder', this.options.filterPlaceholder);\n                    \n                    // Adds optional filter clear button\n                    if(this.options.includeFilterClearBtn){\n                        var clearBtn = $(this.options.templates.filterClearBtn);\n                        clearBtn.on('click', $.proxy(function(event){\n                            clearTimeout(this.searchTimeout);\n                            this.$filter.find('.multiselect-search').val('');\n                            $('li', this.$ul).show().removeClass(\"filter-hidden\");\n                            this.updateSelectAll();\n                        }, this));\n                        this.$filter.find('.input-group').append(clearBtn);\n                    }\n                    \n                    this.$ul.prepend(this.$filter);\n\n                    this.$filter.val(this.query).on('click', function(event) {\n                        event.stopPropagation();\n                    }).on('input keydown', $.proxy(function(event) {\n                        // Cancel enter key default behaviour\n                        if (event.which === 13) {\n                          event.preventDefault();\n                        }\n                        \n                        // This is useful to catch \"keydown\" events after the browser has updated the control.\n                        clearTimeout(this.searchTimeout);\n\n                        this.searchTimeout = this.asyncFunction($.proxy(function() {\n\n                            if (this.query !== event.target.value) {\n                                this.query = event.target.value;\n\n                                var currentGroup, currentGroupVisible;\n                                $.each($('li', this.$ul), $.proxy(function(index, element) {\n                                    var value = $('input', element).length > 0 ? $('input', element).val() : \"\";\n                                    var text = $('label', element).text();\n\n                                    var filterCandidate = '';\n                                    if ((this.options.filterBehavior === 'text')) {\n                                        filterCandidate = text;\n                                    }\n                                    else if ((this.options.filterBehavior === 'value')) {\n                                        filterCandidate = value;\n                                    }\n                                    else if (this.options.filterBehavior === 'both') {\n                                        filterCandidate = text + '\\n' + value;\n                                    }\n\n                                    if (value !== this.options.selectAllValue && text) {\n\n                                        // By default lets assume that element is not\n                                        // interesting for this search.\n                                        var showElement = false;\n\n                                        if (this.options.enableCaseInsensitiveFiltering) {\n                                            filterCandidate = filterCandidate.toLowerCase();\n                                            this.query = this.query.toLowerCase();\n                                        }\n\n                                        if (this.options.enableFullValueFiltering && this.options.filterBehavior !== 'both') {\n                                            var valueToMatch = filterCandidate.trim().substring(0, this.query.length);\n                                            if (this.query.indexOf(valueToMatch) > -1) {\n                                                showElement = true;\n                                            }\n                                        }\n                                        else if (filterCandidate.indexOf(this.query) > -1) {\n                                            showElement = true;\n                                        }\n\n                                        // Toggle current element (group or group item) according to showElement boolean.\n                                        $(element).toggle(showElement).toggleClass('filter-hidden', !showElement);\n                                        \n                                        // Differentiate groups and group items.\n                                        if ($(element).hasClass('multiselect-group')) {\n                                            // Remember group status.\n                                            currentGroup = element;\n                                            currentGroupVisible = showElement;\n                                        }\n                                        else {\n                                            // Show group name when at least one of its items is visible.\n                                            if (showElement) {\n                                                $(currentGroup).show().removeClass('filter-hidden');\n                                            }\n                                            \n                                            // Show all group items when group name satisfies filter.\n                                            if (!showElement && currentGroupVisible) {\n                                                $(element).show().removeClass('filter-hidden');\n                                            }\n                                        }\n                                    }\n                                }, this));\n                            }\n\n                            this.updateSelectAll();\n                        }, this), 300, this);\n                    }, this));\n                }\n            }\n        },\n\n        /**\n         * Unbinds the whole plugin.\n         */\n        destroy: function() {\n            this.$container.remove();\n            this.$select.show();\n            this.$select.data('multiselect', null);\n        },\n\n        /**\n         * Refreshs the multiselect based on the selected options of the select.\n         */\n        refresh: function () {\n            var inputs = $.map($('li input', this.$ul), $);\n            \n            $('option', this.$select).each($.proxy(function (index, element) {\n                var $elem = $(element);\n                var value = $elem.val();\n                var $input;\n                for (var i = inputs.length; 0 < i--; /**/) {\n                    if (value !== ($input = inputs[i]).val())\n                        continue; // wrong li\n\n                    if ($elem.is(':selected')) {\n                        $input.prop('checked', true);\n\n                        if (this.options.selectedClass) {\n                            $input.closest('li')\n                                .addClass(this.options.selectedClass);\n                        }\n                    }\n                    else {\n                        $input.prop('checked', false);\n\n                        if (this.options.selectedClass) {\n                            $input.closest('li')\n                                .removeClass(this.options.selectedClass);\n                        }\n                    }\n\n                    if ($elem.is(\":disabled\")) {\n                        $input.attr('disabled', 'disabled')\n                            .prop('disabled', true)\n                            .closest('li')\n                            .addClass('disabled');\n                    }\n                    else {\n                        $input.prop('disabled', false)\n                            .closest('li')\n                            .removeClass('disabled');\n                    }\n                    break; // assumes unique values\n                }\n            }, this));\n\n            this.updateButtonText();\n            this.updateSelectAll();\n        },\n\n        /**\n         * Select all options of the given values.\n         * \n         * If triggerOnChange is set to true, the on change event is triggered if\n         * and only if one value is passed.\n         * \n         * @param {Array} selectValues\n         * @param {Boolean} triggerOnChange\n         */\n        select: function(selectValues, triggerOnChange) {\n            if(!$.isArray(selectValues)) {\n                selectValues = [selectValues];\n            }\n\n            for (var i = 0; i < selectValues.length; i++) {\n                var value = selectValues[i];\n\n                if (value === null || value === undefined) {\n                    continue;\n                }\n\n                var $option = this.getOptionByValue(value);\n                var $checkbox = this.getInputByValue(value);\n\n                if($option === undefined || $checkbox === undefined) {\n                    continue;\n                }\n                \n                if (!this.options.multiple) {\n                    this.deselectAll(false);\n                }\n                \n                if (this.options.selectedClass) {\n                    $checkbox.closest('li')\n                        .addClass(this.options.selectedClass);\n                }\n\n                $checkbox.prop('checked', true);\n                $option.prop('selected', true);\n                \n                if (triggerOnChange) {\n                    this.options.onChange($option, true);\n                }\n            }\n\n            this.updateButtonText();\n            this.updateSelectAll();\n        },\n\n        /**\n         * Clears all selected items.\n         */\n        clearSelection: function () {\n            this.deselectAll(false);\n            this.updateButtonText();\n            this.updateSelectAll();\n        },\n\n        /**\n         * Deselects all options of the given values.\n         * \n         * If triggerOnChange is set to true, the on change event is triggered, if\n         * and only if one value is passed.\n         * \n         * @param {Array} deselectValues\n         * @param {Boolean} triggerOnChange\n         */\n        deselect: function(deselectValues, triggerOnChange) {\n            if(!$.isArray(deselectValues)) {\n                deselectValues = [deselectValues];\n            }\n\n            for (var i = 0; i < deselectValues.length; i++) {\n                var value = deselectValues[i];\n\n                if (value === null || value === undefined) {\n                    continue;\n                }\n\n                var $option = this.getOptionByValue(value);\n                var $checkbox = this.getInputByValue(value);\n\n                if($option === undefined || $checkbox === undefined) {\n                    continue;\n                }\n\n                if (this.options.selectedClass) {\n                    $checkbox.closest('li')\n                        .removeClass(this.options.selectedClass);\n                }\n\n                $checkbox.prop('checked', false);\n                $option.prop('selected', false);\n                \n                if (triggerOnChange) {\n                    this.options.onChange($option, false);\n                }\n            }\n\n            this.updateButtonText();\n            this.updateSelectAll();\n        },\n        \n        /**\n         * Selects all enabled & visible options.\n         *\n         * If justVisible is true or not specified, only visible options are selected.\n         *\n         * @param {Boolean} justVisible\n         * @param {Boolean} triggerOnSelectAll\n         */\n        selectAll: function (justVisible, triggerOnSelectAll) {\n            justVisible = (this.options.enableCollapsibleOptGroups && this.options.multiple) ? false : justVisible;\n            \n            var justVisible = typeof justVisible === 'undefined' ? true : justVisible;\n            var allCheckboxes = $(\"li input[type='checkbox']:enabled\", this.$ul);\n            var visibleCheckboxes = allCheckboxes.filter(\":visible\");\n            var allCheckboxesCount = allCheckboxes.length;\n            var visibleCheckboxesCount = visibleCheckboxes.length;\n            \n            if(justVisible) {\n                visibleCheckboxes.prop('checked', true);\n                $(\"li:not(.divider):not(.disabled)\", this.$ul).filter(\":visible\").addClass(this.options.selectedClass);\n            }\n            else {\n                allCheckboxes.prop('checked', true);\n                $(\"li:not(.divider):not(.disabled)\", this.$ul).addClass(this.options.selectedClass);\n            }\n                \n            if (allCheckboxesCount === visibleCheckboxesCount || justVisible === false) {\n                $(\"option:not([data-role='divider']):enabled\", this.$select).prop('selected', true);\n            }\n            else {\n                var values = visibleCheckboxes.map(function() {\n                    return $(this).val();\n                }).get();\n                \n                $(\"option:enabled\", this.$select).filter(function(index) {\n                    return $.inArray($(this).val(), values) !== -1;\n                }).prop('selected', true);\n            }\n            \n            if (triggerOnSelectAll) {\n                this.options.onSelectAll();\n            }\n        },\n\n        /**\n         * Deselects all options.\n         * \n         * If justVisible is true or not specified, only visible options are deselected.\n         * \n         * @param {Boolean} justVisible\n         */\n        deselectAll: function (justVisible) {\n            justVisible = (this.options.enableCollapsibleOptGroups && this.options.multiple) ? false : justVisible;\n            justVisible = typeof justVisible === 'undefined' ? true : justVisible;\n            \n            if(justVisible) {              \n                var visibleCheckboxes = $(\"li input[type='checkbox']:not(:disabled)\", this.$ul).filter(\":visible\");\n                visibleCheckboxes.prop('checked', false);\n                \n                var values = visibleCheckboxes.map(function() {\n                    return $(this).val();\n                }).get();\n                \n                $(\"option:enabled\", this.$select).filter(function(index) {\n                    return $.inArray($(this).val(), values) !== -1;\n                }).prop('selected', false);\n                \n                if (this.options.selectedClass) {\n                    $(\"li:not(.divider):not(.disabled)\", this.$ul).filter(\":visible\").removeClass(this.options.selectedClass);\n                }\n            }\n            else {\n                $(\"li input[type='checkbox']:enabled\", this.$ul).prop('checked', false);\n                $(\"option:enabled\", this.$select).prop('selected', false);\n                \n                if (this.options.selectedClass) {\n                    $(\"li:not(.divider):not(.disabled)\", this.$ul).removeClass(this.options.selectedClass);\n                }\n            }\n        },\n\n        /**\n         * Rebuild the plugin.\n         * \n         * Rebuilds the dropdown, the filter and the select all option.\n         */\n        rebuild: function() {\n            this.$ul.html('');\n\n            // Important to distinguish between radios and checkboxes.\n            this.options.multiple = this.$select.attr('multiple') === \"multiple\";\n\n            this.buildSelectAll();\n            this.buildDropdownOptions();\n            this.buildFilter();\n\n            this.updateButtonText();\n            this.updateSelectAll(true);\n            \n            if (this.options.disableIfEmpty && $('option', this.$select).length <= 0) {\n                this.disable();\n            }\n            else {\n                this.enable();\n            }\n            \n            if (this.options.dropRight) {\n                this.$ul.addClass('pull-right');\n            }\n        },\n\n        /**\n         * The provided data will be used to build the dropdown.\n         */\n        dataprovider: function(dataprovider) {\n            \n            var groupCounter = 0;\n            var $select = this.$select.empty();\n            \n            $.each(dataprovider, function (index, option) {\n                var $tag;\n                \n                if ($.isArray(option.children)) { // create optiongroup tag\n                    groupCounter++;\n                    \n                    $tag = $('<optgroup/>').attr({\n                        label: option.label || 'Group ' + groupCounter,\n                        disabled: !!option.disabled\n                    });\n                    \n                    forEach(option.children, function(subOption) { // add children option tags\n                        $tag.append($('<option/>').attr({\n                            value: subOption.value,\n                            label: subOption.label || subOption.value,\n                            title: subOption.title,\n                            selected: !!subOption.selected,\n                            disabled: !!subOption.disabled\n                        }));\n                    });\n                }\n                else {\n                    $tag = $('<option/>').attr({\n                        value: option.value,\n                        label: option.label || option.value,\n                        title: option.title,\n                        class: option.class,\n                        selected: !!option.selected,\n                        disabled: !!option.disabled\n                    });\n                    $tag.text(option.label || option.value);\n                }\n                \n                $select.append($tag);\n            });\n            \n            this.rebuild();\n        },\n\n        /**\n         * Enable the multiselect.\n         */\n        enable: function() {\n            this.$select.prop('disabled', false);\n            this.$button.prop('disabled', false)\n                .removeClass('disabled');\n        },\n\n        /**\n         * Disable the multiselect.\n         */\n        disable: function() {\n            this.$select.prop('disabled', true);\n            this.$button.prop('disabled', true)\n                .addClass('disabled');\n        },\n\n        /**\n         * Set the options.\n         *\n         * @param {Array} options\n         */\n        setOptions: function(options) {\n            this.options = this.mergeOptions(options);\n        },\n\n        /**\n         * Merges the given options with the default options.\n         *\n         * @param {Array} options\n         * @returns {Array}\n         */\n        mergeOptions: function(options) {\n            return $.extend(true, {}, this.defaults, this.options, options);\n        },\n\n        /**\n         * Checks whether a select all checkbox is present.\n         *\n         * @returns {Boolean}\n         */\n        hasSelectAll: function() {\n            return $('li.multiselect-all', this.$ul).length > 0;\n        },\n\n        /**\n         * Updates the select all checkbox based on the currently displayed and selected checkboxes.\n         */\n        updateSelectAll: function(notTriggerOnSelectAll) {\n            if (this.hasSelectAll()) {\n                var allBoxes = $(\"li:not(.multiselect-item):not(.filter-hidden) input:enabled\", this.$ul);\n                var allBoxesLength = allBoxes.length;\n                var checkedBoxesLength = allBoxes.filter(\":checked\").length;\n                var selectAllLi  = $(\"li.multiselect-all\", this.$ul);\n                var selectAllInput = selectAllLi.find(\"input\");\n                \n                if (checkedBoxesLength > 0 && checkedBoxesLength === allBoxesLength) {\n                    selectAllInput.prop(\"checked\", true);\n                    selectAllLi.addClass(this.options.selectedClass);\n                    this.options.onSelectAll(true);\n                }\n                else {\n                    selectAllInput.prop(\"checked\", false);\n                    selectAllLi.removeClass(this.options.selectedClass);\n                    if (checkedBoxesLength === 0) {\n                        if (!notTriggerOnSelectAll) {\n                            this.options.onSelectAll(false);\n                        }\n                    }\n                }\n            }\n        },\n\n        /**\n         * Update the button text and its title based on the currently selected options.\n         */\n        updateButtonText: function() {\n            var options = this.getSelected();\n            \n            // First update the displayed button text.\n            if (this.options.enableHTML) {\n                $('.multiselect .multiselect-selected-text', this.$container).html(this.options.buttonText(options, this.$select));\n            }\n            else {\n                $('.multiselect .multiselect-selected-text', this.$container).text(this.options.buttonText(options, this.$select));\n            }\n            \n            // Now update the title attribute of the button.\n            $('.multiselect', this.$container).attr('title', this.options.buttonTitle(options, this.$select));\n        },\n\n        /**\n         * Get all selected options.\n         *\n         * @returns {jQUery}\n         */\n        getSelected: function() {\n            return $('option', this.$select).filter(\":selected\");\n        },\n\n        /**\n         * Gets a select option by its value.\n         *\n         * @param {String} value\n         * @returns {jQuery}\n         */\n        getOptionByValue: function (value) {\n\n            var options = $('option', this.$select);\n            var valueToCompare = value.toString();\n\n            for (var i = 0; i < options.length; i = i + 1) {\n                var option = options[i];\n                if (option.value === valueToCompare) {\n                    return $(option);\n                }\n            }\n        },\n\n        /**\n         * Get the input (radio/checkbox) by its value.\n         *\n         * @param {String} value\n         * @returns {jQuery}\n         */\n        getInputByValue: function (value) {\n\n            var checkboxes = $('li input', this.$ul);\n            var valueToCompare = value.toString();\n\n            for (var i = 0; i < checkboxes.length; i = i + 1) {\n                var checkbox = checkboxes[i];\n                if (checkbox.value === valueToCompare) {\n                    return $(checkbox);\n                }\n            }\n        },\n\n        /**\n         * Used for knockout integration.\n         */\n        updateOriginalOptions: function() {\n            this.originalOptions = this.$select.clone()[0].options;\n        },\n\n        asyncFunction: function(callback, timeout, self) {\n            var args = Array.prototype.slice.call(arguments, 3);\n            return setTimeout(function() {\n                callback.apply(self || window, args);\n            }, timeout);\n        },\n\n        setAllSelectedText: function(allSelectedText) {\n            this.options.allSelectedText = allSelectedText;\n            this.updateButtonText();\n        }\n    };\n\n    $.fn.multiselect = function(option, parameter, extraOptions) {\n        return this.each(function() {\n            var data = $(this).data('multiselect');\n            var options = typeof option === 'object' && option;\n\n            // Initialize the multiselect.\n            if (!data) {\n                data = new Multiselect(this, options);\n                $(this).data('multiselect', data);\n            }\n\n            // Call multiselect method.\n            if (typeof option === 'string') {\n                data[option](parameter, extraOptions);\n                \n                if (option === 'destroy') {\n                    $(this).data('multiselect', false);\n                }\n            }\n        });\n    };\n\n    $.fn.multiselect.Constructor = Multiselect;\n\n    $(function() {\n        $(\"select[data-role=multiselect]\").multiselect();\n    });\n\n}(window.jQuery);\n","/* =========================================================\n * bootstrap-datepicker.js \n * http://www.eyecon.ro/bootstrap-datepicker\n * =========================================================\n * Copyright 2012 Stefan Petre\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ========================================================= */\n \n!function( $ ) {\n\t\n\t// Picker object\n\t\n\tvar Datepicker = function(element, options){\n\t\tthis.element = $(element);\n\t\tthis.format = DPGlobal.parseFormat(options.format||this.element.data('date-format')||'mm/dd/yyyy');\n\t\tthis.picker = $(DPGlobal.template)\n\t\t\t\t\t\t\t.appendTo('body')\n\t\t\t\t\t\t\t.on({\n\t\t\t\t\t\t\t\tclick: $.proxy(this.click, this)//,\n\t\t\t\t\t\t\t\t//mousedown: $.proxy(this.mousedown, this)\n\t\t\t\t\t\t\t});\n\t\tthis.isInput = this.element.is('input');\n\t\tthis.component = this.element.is('.date') ? this.element.find('.add-on') : false;\n\t\t\n\t\tif (this.isInput) {\n\t\t\tthis.element.on({\n\t\t\t\tfocus: $.proxy(this.show, this),\n\t\t\t\t//blur: $.proxy(this.hide, this),\n\t\t\t\tkeyup: $.proxy(this.update, this)\n\t\t\t});\n\t\t} else {\n\t\t\tif (this.component){\n\t\t\t\tthis.component.on('click', $.proxy(this.show, this));\n\t\t\t} else {\n\t\t\t\tthis.element.on('click', $.proxy(this.show, this));\n\t\t\t}\n\t\t}\n\t\n\t\tthis.minViewMode = options.minViewMode||this.element.data('date-minviewmode')||0;\n\t\tif (typeof this.minViewMode === 'string') {\n\t\t\tswitch (this.minViewMode) {\n\t\t\t\tcase 'months':\n\t\t\t\t\tthis.minViewMode = 1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'years':\n\t\t\t\t\tthis.minViewMode = 2;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthis.minViewMode = 0;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tthis.viewMode = options.viewMode||this.element.data('date-viewmode')||0;\n\t\tif (typeof this.viewMode === 'string') {\n\t\t\tswitch (this.viewMode) {\n\t\t\t\tcase 'months':\n\t\t\t\t\tthis.viewMode = 1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'years':\n\t\t\t\t\tthis.viewMode = 2;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthis.viewMode = 0;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tthis.startViewMode = this.viewMode;\n\t\tthis.weekStart = options.weekStart||this.element.data('date-weekstart')||0;\n\t\tthis.weekEnd = this.weekStart === 0 ? 6 : this.weekStart - 1;\n\t\tthis.onRender = options.onRender;\n\t\tthis.fillDow();\n\t\tthis.fillMonths();\n\t\tthis.update();\n\t\tthis.showMode();\n\t};\n\t\n\tDatepicker.prototype = {\n\t\tconstructor: Datepicker,\n\t\t\n\t\tshow: function(e) {\n\t\t\tthis.picker.show();\n\t\t\tthis.height = this.component ? this.component.outerHeight() : this.element.outerHeight();\n\t\t\tthis.place();\n\t\t\t$(window).on('resize', $.proxy(this.place, this));\n\t\t\tif (e ) {\n\t\t\t\te.stopPropagation();\n\t\t\t\te.preventDefault();\n\t\t\t}\n\t\t\tif (!this.isInput) {\n\t\t\t}\n\t\t\tvar that = this;\n\t\t\t$(document).on('mousedown', function(ev){\n\t\t\t\tif ($(ev.target).closest('.datepicker').length == 0) {\n\t\t\t\t\tthat.hide();\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.element.trigger({\n\t\t\t\ttype: 'show',\n\t\t\t\tdate: this.date\n\t\t\t});\n\t\t},\n\t\t\n\t\thide: function(){\n\t\t\tthis.picker.hide();\n\t\t\t$(window).off('resize', this.place);\n\t\t\tthis.viewMode = this.startViewMode;\n\t\t\tthis.showMode();\n\t\t\tif (!this.isInput) {\n\t\t\t\t$(document).off('mousedown', this.hide);\n\t\t\t}\n\t\t\t//this.set();\n\t\t\tthis.element.trigger({\n\t\t\t\ttype: 'hide',\n\t\t\t\tdate: this.date\n\t\t\t});\n\t\t},\n\t\t\n\t\tset: function() {\n\t\t\tvar formated = DPGlobal.formatDate(this.date, this.format);\n\t\t\tif (!this.isInput) {\n\t\t\t\tif (this.component){\n\t\t\t\t\tthis.element.find('input').prop('value', formated);\n\t\t\t\t}\n\t\t\t\tthis.element.data('date', formated);\n\t\t\t} else {\n\t\t\t\tthis.element.prop('value', formated);\n\t\t\t}\n\t\t},\n\t\t\n\t\tsetValue: function(newDate) {\n\t\t\tif (typeof newDate === 'string') {\n\t\t\t\tthis.date = DPGlobal.parseDate(newDate, this.format);\n\t\t\t} else {\n\t\t\t\tthis.date = new Date(newDate);\n\t\t\t}\n\t\t\tthis.set();\n\t\t\tthis.viewDate = new Date(this.date.getFullYear(), this.date.getMonth(), 1, 0, 0, 0, 0);\n\t\t\tthis.fill();\n\t\t},\n\t\t\n\t\tplace: function(){\n\t\t\tvar offset = this.component ? this.component.offset() : this.element.offset();\n\t\t\tthis.picker.css({\n\t\t\t\ttop: offset.top + this.height,\n\t\t\t\tleft: offset.left\n\t\t\t});\n\t\t},\n\t\t\n\t\tupdate: function(newDate){\n\t\t\tthis.date = DPGlobal.parseDate(\n\t\t\t\ttypeof newDate === 'string' ? newDate : (this.isInput ? this.element.prop('value') : this.element.data('date')),\n\t\t\t\tthis.format\n\t\t\t);\n\t\t\tthis.viewDate = new Date(this.date.getFullYear(), this.date.getMonth(), 1, 0, 0, 0, 0);\n\t\t\tthis.fill();\n\t\t},\n\t\t\n\t\tfillDow: function(){\n\t\t\tvar dowCnt = this.weekStart;\n\t\t\tvar html = '<tr>';\n\t\t\twhile (dowCnt < this.weekStart + 7) {\n\t\t\t\thtml += '<th class=\"dow\">'+DPGlobal.dates.daysMin[(dowCnt++)%7]+'</th>';\n\t\t\t}\n\t\t\thtml += '</tr>';\n\t\t\tthis.picker.find('.datepicker-days thead').append(html);\n\t\t},\n\t\t\n\t\tfillMonths: function(){\n\t\t\tvar html = '';\n\t\t\tvar i = 0\n\t\t\twhile (i < 12) {\n\t\t\t\thtml += '<span class=\"month\">'+DPGlobal.dates.monthsShort[i++]+'</span>';\n\t\t\t}\n\t\t\tthis.picker.find('.datepicker-months td').append(html);\n\t\t},\n\t\t\n\t\tfill: function() {\n\t\t\tvar d = new Date(this.viewDate),\n\t\t\t\tyear = d.getFullYear(),\n\t\t\t\tmonth = d.getMonth(),\n\t\t\t\tcurrentDate = this.date.valueOf();\n\t\t\tthis.picker.find('.datepicker-days th:eq(1)')\n\t\t\t\t\t\t.text(DPGlobal.dates.months[month]+' '+year);\n\t\t\tvar prevMonth = new Date(year, month-1, 28,0,0,0,0),\n\t\t\t\tday = DPGlobal.getDaysInMonth(prevMonth.getFullYear(), prevMonth.getMonth());\n\t\t\tprevMonth.setDate(day);\n\t\t\tprevMonth.setDate(day - (prevMonth.getDay() - this.weekStart + 7)%7);\n\t\t\tvar nextMonth = new Date(prevMonth);\n\t\t\tnextMonth.setDate(nextMonth.getDate() + 42);\n\t\t\tnextMonth = nextMonth.valueOf();\n\t\t\tvar html = [];\n\t\t\tvar clsName,\n\t\t\t\tprevY,\n\t\t\t\tprevM;\n\t\t\twhile(prevMonth.valueOf() < nextMonth) {\n\t\t\t\tif (prevMonth.getDay() === this.weekStart) {\n\t\t\t\t\thtml.push('<tr>');\n\t\t\t\t}\n\t\t\t\tclsName = this.onRender(prevMonth);\n\t\t\t\tprevY = prevMonth.getFullYear();\n\t\t\t\tprevM = prevMonth.getMonth();\n\t\t\t\tif ((prevM < month &&  prevY === year) ||  prevY < year) {\n\t\t\t\t\tclsName += ' old';\n\t\t\t\t} else if ((prevM > month && prevY === year) || prevY > year) {\n\t\t\t\t\tclsName += ' new';\n\t\t\t\t}\n\t\t\t\tif (prevMonth.valueOf() === currentDate) {\n\t\t\t\t\tclsName += ' active';\n\t\t\t\t}\n\t\t\t\thtml.push('<td class=\"day '+clsName+'\">'+prevMonth.getDate() + '</td>');\n\t\t\t\tif (prevMonth.getDay() === this.weekEnd) {\n\t\t\t\t\thtml.push('</tr>');\n\t\t\t\t}\n\t\t\t\tprevMonth.setDate(prevMonth.getDate()+1);\n\t\t\t}\n\t\t\tthis.picker.find('.datepicker-days tbody').empty().append(html.join(''));\n\t\t\tvar currentYear = this.date.getFullYear();\n\t\t\t\n\t\t\tvar months = this.picker.find('.datepicker-months')\n\t\t\t\t\t\t.find('th:eq(1)')\n\t\t\t\t\t\t\t.text(year)\n\t\t\t\t\t\t\t.end()\n\t\t\t\t\t\t.find('span').removeClass('active');\n\t\t\tif (currentYear === year) {\n\t\t\t\tmonths.eq(this.date.getMonth()).addClass('active');\n\t\t\t}\n\t\t\t\n\t\t\thtml = '';\n\t\t\tyear = parseInt(year/10, 10) * 10;\n\t\t\tvar yearCont = this.picker.find('.datepicker-years')\n\t\t\t\t\t\t\t\t.find('th:eq(1)')\n\t\t\t\t\t\t\t\t\t.text(year + '-' + (year + 9))\n\t\t\t\t\t\t\t\t\t.end()\n\t\t\t\t\t\t\t\t.find('td');\n\t\t\tyear -= 1;\n\t\t\tfor (var i = -1; i < 11; i++) {\n\t\t\t\thtml += '<span class=\"year'+(i === -1 || i === 10 ? ' old' : '')+(currentYear === year ? ' active' : '')+'\">'+year+'</span>';\n\t\t\t\tyear += 1;\n\t\t\t}\n\t\t\tyearCont.html(html);\n\t\t},\n\t\t\n\t\tclick: function(e) {\n\t\t\te.stopPropagation();\n\t\t\te.preventDefault();\n\t\t\tvar target = $(e.target).closest('span, td, th');\n\t\t\tif (target.length === 1) {\n\t\t\t\tswitch(target[0].nodeName.toLowerCase()) {\n\t\t\t\t\tcase 'th':\n\t\t\t\t\t\tswitch(target[0].className) {\n\t\t\t\t\t\t\tcase 'switch':\n\t\t\t\t\t\t\t\tthis.showMode(1);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 'prev':\n\t\t\t\t\t\t\tcase 'next':\n\t\t\t\t\t\t\t\tthis.viewDate['set'+DPGlobal.modes[this.viewMode].navFnc].call(\n\t\t\t\t\t\t\t\t\tthis.viewDate,\n\t\t\t\t\t\t\t\t\tthis.viewDate['get'+DPGlobal.modes[this.viewMode].navFnc].call(this.viewDate) + \n\t\t\t\t\t\t\t\t\tDPGlobal.modes[this.viewMode].navStep * (target[0].className === 'prev' ? -1 : 1)\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tthis.fill();\n\t\t\t\t\t\t\t\tthis.set();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'span':\n\t\t\t\t\t\tif (target.is('.month')) {\n\t\t\t\t\t\t\tvar month = target.parent().find('span').index(target);\n\t\t\t\t\t\t\tthis.viewDate.setMonth(month);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar year = parseInt(target.text(), 10)||0;\n\t\t\t\t\t\t\tthis.viewDate.setFullYear(year);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (this.viewMode !== 0) {\n\t\t\t\t\t\t\tthis.date = new Date(this.viewDate);\n\t\t\t\t\t\t\tthis.element.trigger({\n\t\t\t\t\t\t\t\ttype: 'changeDate',\n\t\t\t\t\t\t\t\tdate: this.date,\n\t\t\t\t\t\t\t\tviewMode: DPGlobal.modes[this.viewMode].clsName\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.showMode(-1);\n\t\t\t\t\t\tthis.fill();\n\t\t\t\t\t\tthis.set();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'td':\n\t\t\t\t\t\tif (target.is('.day') && !target.is('.disabled')){\n\t\t\t\t\t\t\tvar day = parseInt(target.text(), 10)||1;\n\t\t\t\t\t\t\tvar month = this.viewDate.getMonth();\n\t\t\t\t\t\t\tif (target.is('.old')) {\n\t\t\t\t\t\t\t\tmonth -= 1;\n\t\t\t\t\t\t\t} else if (target.is('.new')) {\n\t\t\t\t\t\t\t\tmonth += 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tvar year = this.viewDate.getFullYear();\n\t\t\t\t\t\t\tthis.date = new Date(year, month, day,0,0,0,0);\n\t\t\t\t\t\t\tthis.viewDate = new Date(year, month, Math.min(28, day),0,0,0,0);\n\t\t\t\t\t\t\tthis.fill();\n\t\t\t\t\t\t\tthis.set();\n\t\t\t\t\t\t\tthis.element.trigger({\n\t\t\t\t\t\t\t\ttype: 'changeDate',\n\t\t\t\t\t\t\t\tdate: this.date,\n\t\t\t\t\t\t\t\tviewMode: DPGlobal.modes[this.viewMode].clsName\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\n\t\tmousedown: function(e){\n\t\t\te.stopPropagation();\n\t\t\te.preventDefault();\n\t\t},\n\t\t\n\t\tshowMode: function(dir) {\n\t\t\tif (dir) {\n\t\t\t\tthis.viewMode = Math.max(this.minViewMode, Math.min(2, this.viewMode + dir));\n\t\t\t}\n\t\t\tthis.picker.find('>div').hide().filter('.datepicker-'+DPGlobal.modes[this.viewMode].clsName).show();\n\t\t}\n\t};\n\t\n\t$.fn.datepicker = function ( option, val ) {\n\t\treturn this.each(function () {\n\t\t\tvar $this = $(this),\n\t\t\t\tdata = $this.data('datepicker'),\n\t\t\t\toptions = typeof option === 'object' && option;\n\t\t\tif (!data) {\n\t\t\t\t$this.data('datepicker', (data = new Datepicker(this, $.extend({}, $.fn.datepicker.defaults,options))));\n\t\t\t}\n\t\t\tif (typeof option === 'string') data[option](val);\n\t\t});\n\t};\n\n\t$.fn.datepicker.defaults = {\n\t\tonRender: function(date) {\n\t\t\treturn '';\n\t\t}\n\t};\n\t$.fn.datepicker.Constructor = Datepicker;\n\t\n\tvar DPGlobal = {\n\t\tmodes: [\n\t\t\t{\n\t\t\t\tclsName: 'days',\n\t\t\t\tnavFnc: 'Month',\n\t\t\t\tnavStep: 1\n\t\t\t},\n\t\t\t{\n\t\t\t\tclsName: 'months',\n\t\t\t\tnavFnc: 'FullYear',\n\t\t\t\tnavStep: 1\n\t\t\t},\n\t\t\t{\n\t\t\t\tclsName: 'years',\n\t\t\t\tnavFnc: 'FullYear',\n\t\t\t\tnavStep: 10\n\t\t}],\n\t\tdates:{\n\t\t\tdays: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"],\n\t\t\tdaysShort: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"],\n\t\t\tdaysMin: [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\", \"Su\"],\n\t\t\tmonths: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n\t\t\tmonthsShort: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n\t\t},\n\t\tisLeapYear: function (year) {\n\t\t\treturn (((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0))\n\t\t},\n\t\tgetDaysInMonth: function (year, month) {\n\t\t\treturn [31, (DPGlobal.isLeapYear(year) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month]\n\t\t},\n\t\tparseFormat: function(format){\n\t\t\tvar separator = format.match(/[.\\/\\-\\s].*?/),\n\t\t\t\tparts = format.split(/\\W+/);\n\t\t\tif (!separator || !parts || parts.length === 0){\n\t\t\t\tthrow new Error(\"Invalid date format.\");\n\t\t\t}\n\t\t\treturn {separator: separator, parts: parts};\n\t\t},\n\t\tparseDate: function(date, format) {\n\t\t\tvar parts = date.split(format.separator),\n\t\t\t\tdate = new Date(),\n\t\t\t\tval;\n\t\t\tdate.setHours(0);\n\t\t\tdate.setMinutes(0);\n\t\t\tdate.setSeconds(0);\n\t\t\tdate.setMilliseconds(0);\n\t\t\tif (parts.length === format.parts.length) {\n\t\t\t\tvar year = date.getFullYear(), day = date.getDate(), month = date.getMonth();\n\t\t\t\tfor (var i=0, cnt = format.parts.length; i < cnt; i++) {\n\t\t\t\t\tval = parseInt(parts[i], 10)||1;\n\t\t\t\t\tswitch(format.parts[i]) {\n\t\t\t\t\t\tcase 'dd':\n\t\t\t\t\t\tcase 'd':\n\t\t\t\t\t\t\tday = val;\n\t\t\t\t\t\t\tdate.setDate(val);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'mm':\n\t\t\t\t\t\tcase 'm':\n\t\t\t\t\t\t\tmonth = val - 1;\n\t\t\t\t\t\t\tdate.setMonth(val - 1);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'yy':\n\t\t\t\t\t\t\tyear = 2000 + val;\n\t\t\t\t\t\t\tdate.setFullYear(2000 + val);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'yyyy':\n\t\t\t\t\t\t\tyear = val;\n\t\t\t\t\t\t\tdate.setFullYear(val);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdate = new Date(year, month, day, 0 ,0 ,0);\n\t\t\t}\n\t\t\treturn date;\n\t\t},\n\t\tformatDate: function(date, format){\n\t\t\tvar val = {\n\t\t\t\td: date.getDate(),\n\t\t\t\tm: date.getMonth() + 1,\n\t\t\t\tyy: date.getFullYear().toString().substring(2),\n\t\t\t\tyyyy: date.getFullYear()\n\t\t\t};\n\t\t\tval.dd = (val.d < 10 ? '0' : '') + val.d;\n\t\t\tval.mm = (val.m < 10 ? '0' : '') + val.m;\n\t\t\tvar date = [];\n\t\t\tfor (var i=0, cnt = format.parts.length; i < cnt; i++) {\n\t\t\t\tdate.push(val[format.parts[i]]);\n\t\t\t}\n\t\t\treturn date.join(format.separator);\n\t\t},\n\t\theadTemplate: '<thead>'+\n\t\t\t\t\t\t\t'<tr>'+\n\t\t\t\t\t\t\t\t'<th class=\"prev\">&lsaquo;</th>'+\n\t\t\t\t\t\t\t\t'<th colspan=\"5\" class=\"switch\"></th>'+\n\t\t\t\t\t\t\t\t'<th class=\"next\">&rsaquo;</th>'+\n\t\t\t\t\t\t\t'</tr>'+\n\t\t\t\t\t\t'</thead>',\n\t\tcontTemplate: '<tbody><tr><td colspan=\"7\"></td></tr></tbody>'\n\t};\n\tDPGlobal.template = '<div class=\"datepicker dropdown-menu\">'+\n\t\t\t\t\t\t\t'<div class=\"datepicker-days\">'+\n\t\t\t\t\t\t\t\t'<table class=\" table-condensed\">'+\n\t\t\t\t\t\t\t\t\tDPGlobal.headTemplate+\n\t\t\t\t\t\t\t\t\t'<tbody></tbody>'+\n\t\t\t\t\t\t\t\t'</table>'+\n\t\t\t\t\t\t\t'</div>'+\n\t\t\t\t\t\t\t'<div class=\"datepicker-months\">'+\n\t\t\t\t\t\t\t\t'<table class=\"table-condensed\">'+\n\t\t\t\t\t\t\t\t\tDPGlobal.headTemplate+\n\t\t\t\t\t\t\t\t\tDPGlobal.contTemplate+\n\t\t\t\t\t\t\t\t'</table>'+\n\t\t\t\t\t\t\t'</div>'+\n\t\t\t\t\t\t\t'<div class=\"datepicker-years\">'+\n\t\t\t\t\t\t\t\t'<table class=\"table-condensed\">'+\n\t\t\t\t\t\t\t\t\tDPGlobal.headTemplate+\n\t\t\t\t\t\t\t\t\tDPGlobal.contTemplate+\n\t\t\t\t\t\t\t\t'</table>'+\n\t\t\t\t\t\t\t'</div>'+\n\t\t\t\t\t\t'</div>';\n\n}( window.jQuery );"],"sourceRoot":"/source/"}